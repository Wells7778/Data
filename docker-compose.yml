version: "3.5"
services:
  mongo:
    image: mongo:4.1
    container_name: mongo
    volumes:
      - ./mongo/config/mongod.yml:/resource/mongod.yml
      - ./mongo/db:/data/db
    command: mongod --dbpath /data/db --port 27017 --config /resource/mongod.yml
    ports:
      - 27017:27017
    restart: always
  main:
    image: mysql:5.6
    platform: linux/amd64
    container_name: main
    hostname: main
    volumes:
      - ./data/main:/var/lib/mysql
    ports:
      - 3306:3306
    restart: unless-stopped
    environment:
      - TZ=Asia/Taipei
    env_file:
      - ".env"
    command: ["mysqld",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--default-time-zone=+08:00",
      "--server-id=1",
      "--log-bin=/var/lib/mysql/mysql-bin.log",
      "--log-slave-updates=0",
      "--expire_logs_days=10",
      "--max_binlog_size=100M",
      "--innodb_flush_log_at_trx_commit=1",
      "--sync_binlog=1",
      "--read_only=0"]
    networks:
      db_network:
        ipv4_address: 172.24.0.2
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
  replica:
    image: mysql:5.6
    platform: linux/amd64
    volumes:
      - ./data/replica:/var/lib/mysql
    container_name: replica
    hostname: replica
    ports:
      - 3307:3306
    restart: unless-stopped
    environment:
      - TZ=Asia/Taipei
    env_file:
      - "./.env"
    command: ["mysqld",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--default-time-zone=+08:00",
      "--server-id=2",
      "--log-bin=/var/lib/mysql/mysql-bin.log",
      "--log-slave-updates=0",
      "--expire_logs_days=10",
      "--max_binlog_size=100M",
      "--innodb_flush_log_at_trx_commit=1",
      "--sync_binlog=0",
      "--read_only=1"]
    networks:
      db_network:
        ipv4_address: 172.24.0.3
    depends_on:
      - main
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
  redis:
    image: redis
    container_name: redis
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    entrypoint: ["redis-server", "/etc/redis/redis.conf"]
    ports:
      - 6360:6359
    restart: always
    env_file:
      - "./redis/.env"

  elasticsearch:
    image: elasticsearch-smartcn
    container_name: elasticsearch_smartcn
    volumes:
      - ./elasticsearch/esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.1
    container_name: kibana
    ports:
      - 5601:5601
  postgresql:
    image: postgres
    container_name: postgresql
    ports:
      - 5432:5432
    volumes:
      # - ./postgresql/initdb.d:/docker-entrypoint-initdb.d
      - ./postgresql/data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ".env"
networks:
  db_network:
    ipam:
      config:
      - subnet: 172.24.0.0/16
        gateway: 172.24.0.1